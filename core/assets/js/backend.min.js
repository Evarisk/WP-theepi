window.eoxiaJS.theEPI = {};

window.eoxiaJS.theEPIFrontEnd = {};

window.eoxiaJS.theEPI.core = {};

/**
 * Keep the button in memory.
 *
 * @type {Object}
 */
window.eoxiaJS.theEPI.core.currentButton;

/**
 * Keep the media frame in memory.
 * @type {Object}
 */
window.eoxiaJS.theEPI.core.mediaFrame;

/**
 * Keep the selected media in memory.
 * @type {Object}
 */
window.eoxiaJS.theEPI.core.selectedInfos = [];

window.eoxiaJS.theEPI.core.init = function() {
	window.eoxiaJS.theEPI.core.event();
  var action = {
    action: 'theepi_have_patch_note',
  };

  jQuery.post( ajaxurl, action, function ( response ) {
    if ( response.data.status ) {
      jQuery( '.wrap-theepi' ).append( response.data.view );
    }
  } );
};

window.eoxiaJS.theEPI.core.event = function() {
	jQuery( document ).on( 'click', '.wrap-theepi .create-mass-epi', window.eoxiaJS.theEPI.core.openMedia );
  jQuery( document ).on( 'click', '.wrap-theepi .wpeo-notification.patch-note.notification-active', window.eoxiaJS.theEPI.core.openPopup );
  jQuery( document ).on( 'click', '.wrap-theepi .wpeo-notification.patch-note .notification-close', window.eoxiaJS.theEPI.core.closeNotification );
};

window.eoxiaJS.theEPI.core.openMedia = function( event ) {
	window.eoxiaJS.theEPI.core.currentButton = jQuery( this );
	event.preventDefault();

	window.eoxiaJS.theEPI.core.mediaFrame = new window.wp.media.view.MediaFrame.Post({}).open();
	window.eoxiaJS.theEPI.core.mediaFrame.on( 'insert', function() { window.eoxiaJS.theEPI.core.selectedFile(); } );
};

window.eoxiaJS.theEPI.core.selectedFile = function() {
	window.eoxiaJS.theEPI.core.mediaFrame.state().get( 'selection' ).map( function( attachment ) {
		window.eoxiaJS.theEPI.core.selectedInfos.push( attachment.id );
	} );

	var data = {
		action: 'create_mass_epi',
		files_id: window.eoxiaJS.theEPI.core.selectedInfos
	};

	window.eoxiaJS.loader.display( window.eoxiaJS.theEPI.core.currentButton );
	jQuery.post( window.ajaxurl, data, function( response ) {
		var epiView = jQuery( response );
		window.eoxiaJS.loader.remove( window.eoxiaJS.theEPI.core.currentButton );

		window.eoxiaJS.theEPI.core.currentButton = undefined;
		window.eoxiaJS.theEPI.core.selectedInfos = [];
		window.eoxiaJS.theEPI.core.mediaFrame = undefined;

		jQuery( '.wrap-theepi .wpeo-table.epi .tab-container' ).prepend( epiView );
		setTimeout( function() {
			epiView.addClass( 'animate' );
		}, 100 );
	} );
};

/**
 * Ajoutes la classe 'active' dans l'élement 'popup.path-note'.
 *
 * @since 6.3.0
 * @version 6.3.0
 *
 * @param  {MouseEvent} event Les attributs de l'évènement.
 * @return {void}
 */
window.eoxiaJS.theEPI.core.openPopup = function( event ) {
  event.stopPropagation();
  event.preventDefault();
  jQuery( '.wrap-theepi .wpeo-modal.patch-note' ).addClass( 'modal-active' );
};

/**
 * Ajoutes la classe 'active' dans l'élement 'popup.path-note'.
 *
 * @since 6.3.0
 * @version 6.3.0
 *
 * @param  {MouseEvent} event Les attributs de l'évènement.
 * @return {void}
 */
window.eoxiaJS.theEPI.core.closeNotification = function( event ) {
  event.stopPropagation();
  jQuery( this ).closest( '.wpeo-notification' ).removeClass( 'notification-active' );
};

/**
 * Initialise l'objet "audit" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 0.5.0
 * @version 0.5.0
 */

window.eoxiaJS.theEPI.Audit = {};

window.eoxiaJS.theEPI.Audit.init = function() {
	window.eoxiaJS.theEPI.Audit.event();
};

window.eoxiaJS.theEPI.Audit.event = function() {
	jQuery( document ).on( 'click', '.modal-header .button-toggle', window.eoxiaJS.theEPI.Audit.buttonToggle );

};

/**
 * Récupère l'état du bouton toggle.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {ClickEvent} event [t]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.buttonToggle = function( event ) {

	var toggleON = jQuery( this ).hasClass( 'fa-toggle-on' );
	var nextStep = '';
	if (toggleON) {

		nextStep = 'KO';
		jQuery( this ).removeClass( "fa-toggle-on" ).addClass( "fa-toggle-off" );
		jQuery( this ).closest( '.modal-container' ).find( '.modal-footer' ).find( '.wpeo-button' ).attr('data-status-epi', 'KO' );
		jQuery( this ).closest( ".button-toggle-modal-headear" ).find( '.button-toggle-OK' ).attr({ 'style' : 'color : grey; font-weight : auto' });
		jQuery( this ).closest( ".button-toggle-modal-headear" ).find( '.button-toggle-KO' ).attr({ 'style' : 'color : black; font-weight : bold' });

	} else {

		nextStep = 'OK';
		jQuery( this ).removeClass( "fa-toggle-off" ).addClass( "fa-toggle-on" );
		jQuery( this ).closest( '.modal-container' ).find( '.modal-footer' ).find( '.wpeo-button' ).attr('data-status-epi', 'OK' );
		jQuery( this ).closest( ".button-toggle-modal-headear" ).find( '.button-toggle-OK' ).attr({ 'style' : 'color : black; font-weight : bold' });
		jQuery( this ).closest( ".button-toggle-modal-headear" ).find( '.button-toggle-KO' ).attr({ 'style' : 'color : grey; font-weight : auto' });

	}

	var id = jQuery( this ).closest( '.button-toggle-modal-headear' ).attr( 'data-id' );
	var action = jQuery( this ).closest( '.button-toggle-modal-headear' ).attr( 'data-action' );
	var nonce = jQuery( this ).closest( '.button-toggle-modal-headear' ).attr( 'data-nonce' );
	var data = {
		action: action,
		_wpnonce: nonce,
		id: id,
		next_step: nextStep
	};

	window.eoxiaJS.loader.display( jQuery( this ).closest( '.button-toggle-modal-headear' ) );
	window.eoxiaJS.request.send( jQuery( this ), data );

};

/**
 * Le callback en cas de réussite à la requête Ajax "create_task_audit".
 * Ajoute une tâche à l'audit de contrôle.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.createdTaskAuditSuccess = function( triggeredElement, response ) {
	console.log( 'OK ');
	console.log( response.data.view  );
	var element = triggeredElement.closest( '.modal-container' ).find( '.modal-content' );
	var content = element.html();
	element.html( response.data.view + content );
};

/**
 * Le callback en cas de réussite à la requête Ajax "import_task_audit".
 * Importer une tâche à l'audit de contrôle.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.ImportedTaskAuditSuccess = function( triggeredElement, response ) {
	console.log( 'OK ');
	console.log( response.data.view  );
	var element = triggeredElement.closest( '.wpeo-modal' );
	element .replaceWith( response.data.view );

};

/**
 * Le callback en cas de réussite à la requête Ajax "import_button_task_audit".
 * Importer les boutons sur l'audit de contrôle.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.ImportedButtonTaskAuditSuccess = function( triggeredElement, response ) {
	var header = triggeredElement.closest( '.wpeo-modal' ).find( '.modal-header' ).find('.modal-title-header');
	header.html( response.data.modal_title );
	var content = triggeredElement.closest( '.wpeo-modal' ).find( '.modal-content' );
	content.html( response.data.view );
	var footer = triggeredElement.closest( '.wpeo-modal' ).find( '.modal-footer' );
	footer.html( response.data.buttons_view);

};

/**
 * Le callback en cas de réussite à la requête Ajax "control_epi".
 * Affiche le modal template pour effecter le contrôle.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.ControlEPISuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.table-row' ).append( response.data.modal_template );
	triggeredElement.closest( '.epi-row' ).find( '.control_audit' ).html( response.data.view_item );
};

/**
 * Le callback en cas de réussite à la requête Ajax "display_control_epi".
 * Affiche la vue du dernier contrôle effectué.
 *
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.DisplayControlEPISuccess = function( triggeredElement, response ) {
	triggeredElement.parent().append( response.data.modal_template );
};

/**
 * Le callback en cas de réussite à la requête Ajax "valid_audit".
 * Valide le contrôle.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.ValidAuditSuccess = function( triggeredElement, response ) {
	jQuery( '.wrap .container-content .epi .epi-row[ data-id="' + response.data.id + '"]' ).replaceWith( response.data.view );
	jQuery( '.wrap .container-content').before( response.data.notice );
	setTimeout( function() {
		jQuery( '.wrap.wpeo-wrap.wrap-theepi' ).find( '.wpeo-notice.notice-success' ).remove();
	}, 10000 );
};

/**
 * Le callback en cas de réussite à la requête Ajax "get_content_from_url_audit".
 * Récupère le texte d'une url github.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.GetContentFromUrlAuditSuccess = function( triggeredElement, response ){
    if( response.data.content != "" ){
        triggeredElement.closest( '.modal-content' ).find( 'textarea[ name="content"]' ).html( response.data.content );
    }
}

/**
 * Le callback en cas de réussite à la requête Ajax "display_all_audit".
 * Affiche tout les contrôle effectués sur un EPI.
 *
 * @since 0.5.0
 * @version 0.6.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.Audit.DisplayAllAuditSuccess = function( triggeredElement, response ) {
	var toggleChevron = triggeredElement.find( '.icon' ).hasClass( 'fa-chevron-right' );

	if ( toggleChevron ) {
	 	triggeredElement.closest( '.display_all_audit' ).find( '.icon' ).removeClass( "fa-chevron-right" ).addClass( "fa-chevron-down" );
		triggeredElement.closest( '.epi-row.view' ).find( '.control_audit' ).html( response.data.view );
		//triggeredElement.closest( '.control_audit .tm-audit .audit-container' ).find( '.epi-item-link-control' ).remove();
	} else {
		triggeredElement.closest( '.display_all_audit' ).find( '.icon' ).removeClass( "fa-chevron-down" ).addClass( "fa-chevron-right" );
		jQuery( '.wrap .container-content .epi .epi-row[ data-id="' + response.data.id + '"]' ).find( '.control_audit').html( response.data.single_view_audit );

	}
};

/**
 * JS Lié au Backend de l'objet contrôle.
 *
 * Initialise l'objet "Control" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 0.1.0
 * @version 0.7.0
 */
window.eoxiaJS.theEPI.control = {};

window.eoxiaJS.theEPI.control.init = function() {
	window.eoxiaJS.theEPI.control.event();
};

window.eoxiaJS.theEPI.control.event = function() {
	jQuery( document ).on( 'click', 'body .table-status-control .dropdown-item',  window.eoxiaJS.theEPI.control.displayStatusControl );
};

/**
 * Le callback en cas de réussite à la requête Ajax "display_control".
 * Affiche le modal de contrôle d'un EPI et la liste des contrôles déjà effectués.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.displayControlSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.tab-container' ).append( response.data.view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_control_epi" (Mode Création).
 * Affiche la vue Edition d'un contrôle d'un EPI (Mode Création).
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.createdControlSuccess = function( triggeredElement, response ) {
	// triggeredElement.closest( '.modal-control-epi' ).find( '.tab-container .new-row-control-epi' ).html( response.data.view );
	triggeredElement.closest( '.modal-control-epi' ).find( '.tab-container' ).prepend( response.data.view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_control_epi" (Mode Edition).
 * Affiche la vue Edition d'un contrôle d'un EPI (Mode Edition).
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.editedControlSuccess = function( triggeredElement, response ) {
	var id = triggeredElement.attr( 'data-id' );
	triggeredElement.closest( '.modal-control-epi' ).find( '.table-row.epi-control-row.view[data-id="' + id + '"]' ).replaceWith( response.data.view);
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_control_epi".
 * Affiche la vue Edition et Service d'un EPI pour la création.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.savedControlSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.wrap.wpeo-wrap.wrap-theepi' ).find( '.table-row.epi-row.view[data-id="' + response.data.parent_id + '"]' ).replaceWith( response.data.view_epi );
	triggeredElement.closest( '.modal-content' ).html( response.data.view );
};

/**
 * Affiche la liste déroulante des status attribuable à un contrôle.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event click.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.displayStatusControl = function ( event ) {
	var status = jQuery( this ).attr( 'data-status' );
	var parent_element = jQuery( this ).closest( '.table-status-control' );
	parent_element.find( 'input[name="status-control"]' ).val( status );

	var this_html = jQuery( this ).html();
	parent_element.find( '.dropdown-toggle' ).html( this_html );

  parent_element.find( '.dropdown-toggle' ).removeClass( 'OK KO repair trash' );
  parent_element.find( '.dropdown-toggle' ).addClass( status );
  if ( parent_element.find( '.dropdown-toggle' ).hasClass( 'OK KO repair trash' ) );
  {
	 jQuery( this ).closest( '.epi-control-row' ).find( '.wpeo-button' ).removeClass( 'button-disable' );
  }
};

/**
 * Le callback en cas de réussite à la requête Ajax "cancel_edit_control_epi".
 * Annule le mode édition d'un contrôle.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.canceledEditControlEpiSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.table-row' ).replaceWith( response.data.view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_control_epi".
 * Supprimes la ligne courante du tableau "objet contrôle".
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.control.deletedControlEpiSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.table-row' ).remove();
};

/**
 * Initialise l'objet "EPI" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 0.1.0
 * @version 0.6.0
 */
window.eoxiaJS.theEPI.EPI = {};

window.eoxiaJS.theEPI.EPI.init = function() {
	window.eoxiaJS.theEPI.EPI.event();
};

window.eoxiaJS.theEPI.EPI.event = function() {
	jQuery( document ).on( 'click', '.wrap-theepi .wpeo-table .button-save-epi', window.eoxiaJS.theEPI.EPI.saveEPIAjax );
	jQuery( document ).on( 'click', '.wrap-theepi .action-request-edit-epi', window.eoxiaJS.theEPI.EPI.requestEpiEdit );
	jQuery( document ).on( 'keyup', 'body', window.eoxiaJS.theEPI.EPI.addEpiWithKeybord );
	//jQuery( document ).on( 'keyup', 'body', window.eoxiaJS.theEPI.EPI.cancelEpiWithKeybord );

};

/**
 * Ajout d'un EPI en appuyant sur ctrl + enter.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {KeyboardEvent} event L'état du clavier [ctrl+enter].
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.addEpiWithKeybord = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).find( '.wrap-theepi' ).find( '.event-keybord' ).click();
	}
};

// /**
//  * Annule la création ou la modification d'un EPI en appuyant sur la touche echap.
//  *
//  * @since 0.7.0
//  * @version 0.7.0
//  *
//  * @param  {KeyboardEvent} event L'état du clavier [echap].
//  *
//  * @return {void}
//  */
// window.eoxiaJS.theEPI.EPI.cancelEpiWithKeybord = function( event ) {
// 	console.log('zdzdz');
// 	if ( 27 === event.keyCode ) {
// 		var text = jQuery( this ).find( '.advanced-service.footer' ).find( '.event-keybord-cancel' ).attr( 'data-message' );
// 		if ( confirm( text ) ) {
// 			jQuery( this ).find( '.advanced-service.footer' ).find( '.event-keybord-cancel' ).click();
// 		}
// 	}
// };

/**
 * Le callback en cas de réussite à la requête Ajax "create_epi".
 * Affiche la vue Edition et Service d'un EPI pour la création.
 *
 * @since 0.1.0
 * @version 0.6.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.CreatedEpiSuccess = function( triggeredElement, response ) {
	jQuery( '.wpeo-table.epi .epi-row.edit[data-id="' + response.data.close_epi_id + '"]' ).replaceWith( response.data.view_close );
	jQuery( '.wpeo-table.epi .epi-row.service[data-id="' + response.data.close_epi_id + '"]' ).remove();

	var rowContent = jQuery( '<div>', {
		class: 'table-row epi-row edit',
		html: response.data.view_edit_epi + response.data.view_edit_service
	});
	rowContent.attr( 'data-id', response.data.epi_id );

	jQuery( '.wpeo-table.epi .tab-container' ).prepend( rowContent );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_epi".
 * Remplaces la ligne courante du tableau "epi".
 *
 * @since 0.1.0
 * @version 0.4.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.loadedEpiSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.table-row' ).replaceWith( response.data.template );
};


/**
 * Le callback en cas de réussite à la requête Ajax "save_epi".
 * Enregistre les données d'un EPI.
 *
 * @since 0.1.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.savedEpiSuccess = function( triggeredElement, response ) {
	var id = triggeredElement.attr( 'data-id' );
	triggeredElement.closest( '.tab-container' ).find( '.table-row[ data-id="' + id + '"]' ).replaceWith( response.data.view );
	jQuery( '.wpeo-table.epi .epi-row.service' ).remove();
};

/**
 * Le callback en cas de d'erreur à la requête Ajax "save_epi".
 * Affiche l'erreur sur le champ en mode Edition.
 *
 * @since 0.1.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.savedEpiError = function( triggeredElement, response ) {
	let id = triggeredElement.attr( 'data-id' );
	//var parent_element_edit = triggeredElement.closest( '.tab-container' ).find( '.table-row[ data-id="' + id + '"]' );
	let parent_element = triggeredElement.closest( '.tab-container' ).find( '.service[ data-id="' + id + '"]' );

	jQuery.each( response.data.error, function( key, value ) {
		let input_element = parent_element.find( '.form-field[name="' + value.element + '"]');
	  	input_element.closest( '.form-element' ).find( '.form-error' ).html( value.error);
	  	// var input_element_edit = parent_element_edit.find( '.form-field[name="' + value.element + '"]');
	  	// input_element_edit.closest( '.table-cell' ).find( '.error' ).html( value.error );
	});

	window.eoxiaJS.loader.remove( triggeredElement.closest( '.tab-container' ).find( '.table-row[ data-id="' + id + '"]' ) );

};


/**
 * Le callback en cas de réussite à la requête Ajax "delete_epi".
 * Supprimes la ligne courante du tableau "epi".
 *
 * @since 0.1.0
 * @version 0.4.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.deletedEpiSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.table-row' ).remove();
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_epi".
 * Edition d'un "epi".
 *
 * @since 0.1.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.editedEpiSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.tab-container').find( '.epi-row.service' ).remove();
	var idElement = triggeredElement.attr( 'data-id' );

	if( response.data.close_epi_id == 0 ){
		triggeredElement.closest( '.wrap-theepi' ).find( '.wpeo-table.epi .epi-row[data-id="0"]' ).remove();
	}else{
		triggeredElement.closest( '.wrap-theepi' ).find( '.wpeo-table.epi .epi-row[data-id="' + response.data.close_epi_id + '"]' ).replaceWith( response.data.view_close );
	}

	var rowContent = jQuery( '<div>', {
		class: 'table-row epi-row edit',
		html: response.data.view_edit_epi + response.data.view_edit_service
	});
	rowContent.attr( 'data-id', idElement );

	triggeredElement.closest( '.epi-row' ).before( rowContent );
	triggeredElement.closest( '.epi-row' ).remove();
};

/**
 * Le callback en cas de réussite à la requête Ajax "cancel_edit_epi".
 * Annule le mode édition d'un "epi".
 *
 * @since 0.1.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.canceledEditEpiSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.tab-container' ).find( '.epi-row.edit' ).replaceWith( response.data.view );
	triggeredElement.closest('.wpeo-table').find('.service').remove();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_more_epi".
 * Charge les autres EPIS en fonction de la page et de la pagination.
 *
 * @since 0.4.0
 * @version 0.4.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.loadedMoreEPISuccess = function( triggeredElement, response ) {
	var element   = jQuery( response.data.view );
	jQuery( '.wrap-theepi .wpeo-table.table-flex.epi .tab-container' ).html(element);
	var page = triggeredElement.closest( '.wpeo-pagination.epi' ).replaceWith( response.data.view_pagination );
};

/**
 * Le callback en cas de réussite à la requête Ajax "search_epi".
 * Efface le contenue de la recherche.
 *
 * @since 0.4.0
 * @version 0.4.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.searchedEPISuccess = function( triggeredElement, response ) {
	jQuery( '.wrap-theepi .container-content' ).html( response.data.view );

	if ( ! response.data.clear ) {
		jQuery( '.wrap-theepi .box-search .action-attribute' ).removeClass( 'button-disable' );
		jQuery( '.wrap-theepi .epi-load-more' ).attr( 'data-term', jQuery( '.wrap-theepi .box-search input[type="text"]' ).val() );
	} else {
		jQuery( '.wrap-theepi .box-search input[type="text"]' ).val( '' );
		jQuery( '.wrap-theepi .box-search .action-attribute' ).addClass( 'button-disable' );
		jQuery( '.wrap-theepi .epi-load-more' ).attr( 'data-term', '' );
	}
};

/**
 * Met à jour l'affichage du bouton "Load More" en bas de la page.
 *
 * @since 0.4.0
 * @version 0.4.0
 *
 * @param  {number} addNumberEPI      Le nombre d'EPI affiché dans le tableau.
 * @param  {number} addTotalNumberEPI Le nombre total d'EPI dans la base de donnée.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.refreshTextLoadMore = function( addNumberEPI, addTotalNumberEPI ) {
	var currentOffset =  currentNumberEPI = totalNumberEPI = 0;

	currentNumberEPI  = parseInt( jQuery( '.wrap-theepi .epi-load-more .number-epi' ).text() );
	currentNumberEPI += addNumberEPI;

	totalNumberEPI  = parseInt( jQuery( '.wrap-theepi .epi-load-more .total-number-epi' ).text() );
	totalNumberEPI += addTotalNumberEPI;

	if ( currentNumberEPI >= totalNumberEPI ) {
		currentNumberEPI = totalNumberEPI;
		jQuery( '.wrap-theepi .epi-load-more' ).addClass( 'button-disable' );
	} else {
		jQuery( '.wrap-theepi .epi-load-more' ).removeClass( 'button-disable' );
	}

	jQuery( '.wrap-theepi .epi-load-more .number-epi' ).text( currentNumberEPI );


	jQuery( '.wrap-theepi .epi-load-more .total-number-epi' ).text( totalNumberEPI );

	currentOffset = parseInt( jQuery( '.wrap-theepi .epi-load-more' ).attr( 'data-offset' ) );
	currentOffset += addNumberEPI;
	jQuery( '.wrap-theepi .epi-load-more' ).attr( 'data-offset', currentOffset );

};

/**
 * Le callback en cas de réussite à la requête Ajax "export_epi".
 * Exporte la fiche de vie d'un EPI au format ODT.
 *
 * @since 0.5.0
 * @version 0.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.exportedEPISuccess = function ( triggeredElement, response ) {
	var element = document.createElement('a');
	console.log( response.data );
  element.setAttribute('href', response.data.link );
  element.setAttribute('download', response.data.filename);

  element.style.display = 'none';
  document.body.appendChild(element);

  element.click();

  document.body.removeChild(element);
};

/**
 * Récupère les données d'un EPI et déclenche l'action AJAX save_epi.
 *
 * @since 0.6.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [save]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.saveEPIAjax = function ( event ) {
	var id = jQuery( this ).attr( 'data-id' );

	var service_element     = jQuery( this ).closest( '.wpeo-table' ).find( '.service[ data-id="' + id + '"]' );
	var edit_element        = jQuery( this ).closest( '.tab-container' ).find( '.table-row[ data-id="' + id + '"]' );
	var action              = jQuery( this ).attr( 'data-action' );
	var nonce               = jQuery( this ).attr( 'data-nonce' );

	var quantity            = edit_element.find( '.form-field[name="quantity"]' ).val();
	var serial_number       = edit_element.find( '.form-field[name="serial_number"]' ).val();
	var title               = edit_element.find( '.form-field[name="title"]' ).val();

	var toggle_lifetime     = service_element.find( '.button-toggle-lifetime' ).attr( 'data-value' );
	var manufacture_date    = service_element.find( '.mysql-date[name="manufacture-date"]' ).val();
	var lifetime            = service_element.find( '.form-field[name="lifetime"]' ).val();
	var end_life_date       = service_element.find( '.mysql-date[name="end-life-date"]' ).val();
	var disposal_date       = service_element.find( '.mysql-date[name="disposal-date"]' ).val();

	var purchase_date       = service_element.find( '.mysql-date[name="purchase-date"]' ).val();
	var commissioning_date  = service_element.find( '.mysql-date[name="commissioning-date"]' ).val();
	var periodicity         = service_element.find( '.form-field[name="periodicity"]' ).val();
	var control_date        = service_element.find( '.mysql-date[name="control-date"]' ).val();

	var maker               = service_element.find( '.form-field[name="maker"]' ).val();
	var seller              = service_element.find( '.form-field[name="seller"]' ).val();
	var manager             = service_element.find( '.eo-search-value[name="manager"]' ).val();
	var reference           = service_element.find( '.form-field[name="reference"]' ).val();
	var url_notice          = service_element.find( '.form-field[name="url-notice"]' ).val();

	var data = {
		action: action,
		_wpnonce: nonce,
		id: id,

		quantity: quantity,
		serial_number: serial_number,
		title: title,

		toggle_lifetime: toggle_lifetime,
		manufacture_date: manufacture_date,
		lifetime: lifetime,
		end_life_date: end_life_date,
		disposal_date: disposal_date,

		purchase_date: purchase_date,
		commissioning_date: commissioning_date,
		periodicity: periodicity,
		control_date: control_date,

		maker: maker,
		seller: seller,
		manager: manager,
		reference: reference,
		url_notice: url_notice,

	};

	window.eoxiaJS.loader.display( jQuery( this ).closest( '.tab-container' ).find( '.table-row[ data-id="' + id + '"]' ) );

	window.eoxiaJS.request.send( jQuery( this ), data );

};

/**
 * Verifie si la vue EDITION est ouverte.
 *
 * @since 0.6.0
 * @version 0.6.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 *
 * @return {integer} id  La vue edition à fermer.
 */
window.eoxiaJS.theEPI.EPI.checkEditMode = function( triggeredElement ){
	var element = triggeredElement.closest( '.wrap-theepi' ).find( '.wpeo-table.epi' );
  var text = triggeredElement.attr( 'data-message' );
	if ( element.find( '.tab-container').find( '.table-row.epi-row.edit' ).length > 0 ) {
		if( confirm( text ) ){
			var id = element.find( '.tab-container').find( '.table-row.epi-row.edit' ).attr( 'data-id' );
			return id;
		}else{
			return -1;
		}
	}
	return 0;
};

/**
 * Récupère la vue Edition à fermer et déclenche l'action AJAX edit_epi.
 *
 * @since 0.6.0
 * @version 0.6.0
 *
 * @param  {ClickEvent} event [edit]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.requestEpiEdit = function( event ){
	var id = window.eoxiaJS.theEPI.EPI.checkEditMode( jQuery( this ) );

	if( id != -1 ){

		var data = {};
		data.id = jQuery( this ).attr( 'data-id' );
		data.action = jQuery( this ).attr( 'data-action' );
		data._wpnonce = jQuery( this ).attr( 'data-nonce' );
		data.closeepi = id;

		window.eoxiaJS.loader.display( jQuery( this ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
};

/**
 * Ouvre le QrCode en grand.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.openQrCode = function( triggeredElement, response ){
	triggeredElement.closest( '.table-row' ).append( response.data.view );
};

/**
 *  Filtre pour les EPIS.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.EPI.filterEPISuccess = function( triggeredElement, response ){
	window.location.assign(response.data.url);
	console.log('eerere');
	setTimeout(function(){
		var filter = response.data.filters;
		console.log(filter);
		console.log(response.data.url);
	}, 10000);

	// var element = triggeredElement.closest( '.wrap-theepi' ).find( '.epi-filter-bar' ).find( 'option[value="' + filter + '"]' );
	// element.attr( 'selected', 'selected' );

};

/**
 * Initialise l'objet "EPI" + "service" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 0.1.0
 * @version 0.6.0
 */
window.eoxiaJS.theEPI.service = {};

window.eoxiaJS.theEPI.service.init = function() {
	window.eoxiaJS.theEPI.service.event();
};

window.eoxiaJS.theEPI.service.event = function() {
	jQuery( document ).on( 'click', '.row-advanced.service .advanced-service.date .button-toggle', window.eoxiaJS.theEPI.service.buttonToggle );
	jQuery( document ).on( 'change', '.advanced-service.date .update-end-life-date-epi', window.eoxiaJS.theEPI.service.updateEndLifeDateEPI );
	jQuery( document ).on( 'change', '.advanced-service.life-sheet .update-control-date-epi', window.eoxiaJS.theEPI.service.updateControlDateEPI );
	jQuery( document ).on( 'change', '.advanced-service.life-sheet .update-purchase-date-epi', window.eoxiaJS.theEPI.service.updatePurchaseDateEPI );
	jQuery( document ).on( 'change', '.row-advanced.service.main .update-manufacture-date-epi', window.eoxiaJS.theEPI.service.updateManufactureDateEPI );
	jQuery( document ).on( 'mouseenter', '.row-advanced.service.main .empty-date-epi', window.eoxiaJS.theEPI.service.addEmptyOptionDateEPI );
	jQuery( document ).on( 'mouseleave', '.row-advanced.service.main .empty-date-epi', window.eoxiaJS.theEPI.service.removeEmptyOptionDateEPI );
	jQuery( document ).on( 'click', '.row-advanced.service.main .empty-date-epi .form-field-label-next', window.eoxiaJS.theEPI.service.actionEmptyOptionDateEPI );
	jQuery( document ).on( 'keyup', '.row-advanced.service.main .empty-date-epi', window.eoxiaJS.theEPI.service.actionKeybordEmptyOptionDateEPI );

};

/**
 * Récupère l'état du bouton toggle.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [t]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.buttonToggle = function( event ) {

	var toggleON = jQuery( this ).hasClass( 'fa-toggle-on' );
	var nextStep = '';
	if (toggleON) {
		nextStep = 'NO';
		jQuery( this ).removeClass( "fa-toggle-on" ).addClass( "fa-toggle-off" );
		jQuery( this ).closest( ".advanced-service.date" ).find( '.button-toggle-lifetime-display' ).addClass( 'hidden' );
	} else {
	nextStep = 'YES';
		jQuery( this ).removeClass( "fa-toggle-off" ).addClass( "fa-toggle-on" );
		jQuery( this ).closest( ".advanced-service.date" ).find( '.button-toggle-lifetime-display' ).removeClass( 'hidden' );
	}
	jQuery( this ).closest( '.advanced-service.date' ).find( '.button-toggle-lifetime' ).attr( 'data-value' , nextStep );
};

/**
 * Cacul le champ Date de fin de vie instantanément et l'affiche.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [champ Date de fin de vie]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.updateEndLifeDateEPI = function( event ) {
	let parent_element       = jQuery( this ).closest( ".advanced-service.date" );
	let manufacture_date_old = parent_element.find( '.mysql-date[name="manufacture-date"]' ).val();
	let lifetime_old         = parent_element.find( '.form-field[name="lifetime"]' ).val();

	let end_life_date_element_sql = parent_element.find( '.mysql-date[name="end-life-date"]' );
	let end_life_date_element     = parent_element.find( '.form-field[name="end-life-date"]' );

	let end_life_date = new Date( manufacture_date_old );
	end_life_date.setDate( end_life_date.getDate() + parseInt(lifetime_old) );
	month = end_life_date.getMonth() + 1;
	month   = month < 10 ? '0' + month : month;
	day     = end_life_date.getDate()  < 10 ? '0' + end_life_date.getDate()  : end_life_date.getDate();
	end_life_date_sql = end_life_date.getFullYear() + '-' + month + '-' + day;
	end_life_date_display = day + '/' + month + '/' + end_life_date.getFullYear();

	if ( end_life_date_sql !== 'NaN/NaN/NaN' && end_life_date_display !== 'NaN/NaN/NaN') {
		end_life_date_element_sql.val( end_life_date_sql );
		end_life_date_element.val(end_life_date_display);
	}
};

/**
 * Cacul le champ Date de Contrôle instantanément et l'affiche.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [champ Date de Contrôle]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.updateControlDateEPI = function( event ) {
	var parent_element = jQuery( this ).closest( ".advanced-service.life-sheet" );
	var commissioning_date_old = parent_element.find( '.mysql-date[name="commissioning-date"]' ).val();
	var periodicity_old = parent_element.find( '.form-field[name="periodicity"]' ).val();

	var control_date_element_sql = parent_element.find( '.mysql-date[name="control-date"]');
	var control_date_element = parent_element.find( '.form-field[name="control-date"]');

	var control_date = new Date( commissioning_date_old );
	control_date.setDate( control_date.getDate() + parseInt(periodicity_old) );
	month = control_date.getMonth() + 1;
	month   = month < 10 ? '0' + month : month;
	day     = control_date.getDate()  < 10 ? '0' + control_date.getDate()  : control_date.getDate();
	control_date_sql = control_date.getFullYear() + '-' + month + '-' + day;
	control_date_display = day + '/' + month + '/' + control_date.getFullYear();

 	if ( control_date_sql != 'NaN/NaN/NaN' && control_date_display != 'NaN/NaN/NaN') {
		control_date_element_sql.val( control_date_sql );
		control_date_element.val(control_date_display);
	}
};

/**
 * Cacul le champ Date d'Achat instantanément et l'affiche.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [champ Date d'Achat]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.updatePurchaseDateEPI = function( event ) {
	var parent_element = jQuery( this ).closest( ".advanced-service.life-sheet" );
	var commissioning_date = parent_element.find( '.mysql-date[name="commissioning-date"]' ).val();

	var purchase_date_element_sql = parent_element.find( '.mysql-date[name="purchase-date"]');
	var purchase_date_element = parent_element.find( '.form-field[name="purchase-date"]');

	var purchase_date = new Date( commissioning_date );
	month = purchase_date.getMonth() + 1;
	month   = month < 10 ? '0' + month : month;
	day     = purchase_date.getDate()  < 10 ? '0' + purchase_date.getDate()  : purchase_date.getDate();
	purchase_date_display = day + '/' + month + '/' + purchase_date.getFullYear();

	purchase_date_element_sql.val( commissioning_date );
	purchase_date_element.val( purchase_date_display );
};

/**
 * Cacul le champ Date de fabrication instantanément et l'affiche.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [champ Date de fabrication]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.updateManufactureDateEPI = function( event ) {
	var parent_element = jQuery( this ).closest( ".row-advanced.service.main" );
	var commissioning_date = parent_element.find( '.mysql-date[name="commissioning-date"]' ).val();
	var manufacture_date_valued = parent_element.find( '.manufacture-date-valued[name="manufacture-date-valued"]' ).val();

	var manufacture_date_element_sql = parent_element.find( '.mysql-date[name="manufacture-date"]');
	var manufacture_date_element = parent_element.find( '.form-field[name="manufacture-date"]');

	var manufacture_date = new Date( commissioning_date );
	manufacture_date.setDate( manufacture_date.getDate() - parseInt(manufacture_date_valued) );
	month = manufacture_date.getMonth() + 1;
	month   = month < 10 ? '0' + month : month;
	day     = manufacture_date.getDate()  < 10 ? '0' + manufacture_date.getDate()  : manufacture_date.getDate();
	manufacture_date_sql = manufacture_date.getFullYear() + '-' + month + '-' + day;
	manufacture_date_display = day + '/' + month + '/' + manufacture_date.getFullYear();

	manufacture_date_element_sql.val( manufacture_date_sql );
	manufacture_date_element.val( manufacture_date_display );

	var manufacture_date_old = parent_element.find( '.mysql-date[name="manufacture-date"]' ).val();
	var lifetime_old = parent_element.find( '.form-field[name="lifetime"]' ).val();

	var end_life_date_element_sql = parent_element.find( '.mysql-date[name="end-life-date"]');
	var end_life_date_element = parent_element.find( '.form-field[name="end-life-date"]');

	var end_life_date = new Date( manufacture_date_old );
	end_life_date.setDate( end_life_date.getDate() + parseInt(lifetime_old) );
	month = end_life_date.getMonth() + 1;
	month   = month < 10 ? '0' + month : month;
	day     = end_life_date.getDate()  < 10 ? '0' + end_life_date.getDate()  : end_life_date.getDate();
	end_life_date_sql = end_life_date.getFullYear() + '-' + month + '-' + day;
	end_life_date_display = day + '/' + month + '/' + end_life_date.getFullYear();

	end_life_date_element_sql.val( end_life_date_sql );
	end_life_date_element.val(end_life_date_display);

};

/**
 * Ajoute au survol une croix.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {MouseEvent} event [champ Date]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.addEmptyOptionDateEPI  = function( event ) {
	var parent_element = jQuery( this ).closest( ".row-advanced.service.main" );
	var myqsl_element = parent_element.find( '.empty-date-epi').find( '.mysql-date').val();
	var date_element = parent_element.find( '.empty-date-epi').find( '.form-field.date' ).val();
	if ( myqsl_element != '' && date_element != '' ) {
		var delete_icon = '<span class="form-field-label-next"><i class="fas fa-times"></i></span>';
		parent_element.find( '.empty-date-epi').append( delete_icon );
	}

};

/**
 * Enlève la croix lorsque qu'on quitte le survol du champ date.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {MouseEvent} event [champ Date]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.removeEmptyOptionDateEPI  = function( event ) {
	var parent_element = jQuery( this ).closest( ".row-advanced.service.main" );
	parent_element.find( '.empty-date-epi').find( '.form-field-label-next' ).remove();

};

/**
 * Vide le champ date en cliquant sur la croix.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event [champ Date]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.actionEmptyOptionDateEPI  = function( event ) {
	var parent_element = jQuery( this ).closest( ".row-advanced.service.main" );
	parent_element.find( '.empty-date-epi').find( '.mysql-date').val( '' );
	parent_element.find( '.empty-date-epi').find( '.form-field.date' ).val( '' );

};

/**
 * Vide le champ date en appuyant sur la touche effacé.
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {KeyboardEvent} event L'état du clavier [effacer].
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.service.actionKeybordEmptyOptionDateEPI = function( event ) {
	if ( 8 === event.keyCode ) {
		var parent_element = jQuery( this ).closest( ".row-advanced.service.main" );
		parent_element.find( '.empty-date-epi').find( '.mysql-date').val( '' );
		parent_element.find( '.empty-date-epi').find( '.form-field.date' ).val( '' );
	}
};

/**
 * Initialise l'objet "setting" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 0.2.0
 * @version 0.6.0
 */
window.eoxiaJS.theEPI.setting = {};

window.eoxiaJS.theEPI.setting.init = function() {
	window.eoxiaJS.theEPI.setting.event();
};

window.eoxiaJS.theEPI.setting.event = function() {
	jQuery( document ).on( 'click', '.settings_page_theepi-setting .list-users .wp-digi-pagination a', window.eoxiaJS.theEPI.setting.pagination );
	jQuery( document ).on( 'click', '.wpeo-tab.setting .tab-redirect .tab-element', window.eoxiaJS.theEPI.setting.tabRedirect );
	jQuery( document ).on( 'click', '.setting-epi', window.eoxiaJS.theEPI.setting.editField );
};

/**
 * Changes d'onglet lors du clic.
 *
 * @since 0.6.0
 * @version 0.6.0
 *
 * @param  {ClickEvent} event L'état de la souris lors du clic.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.tabRedirect = function( event ){
	var etat = true;
	var page = jQuery( '.tab-content.active' ).find( '.setting-epi' ).attr( 'data-page' );
	var url = jQuery( this ).attr( 'data-url' );
	if ( jQuery( '.setting-epi' ).find( '.wpeo-button' ).hasClass( 'button-valid' ) ) {
		var msg = jQuery( this ).closest( '.tab-list' ).attr( 'data-message' );
		if( ! confirm( msg ) ){
			etat = false;
			jQuery( this ).removeClass( 'tab-active' );
			jQuery( '.wpeo-tab.setting' ).find( '.tab-element[data-tab=' + page + ']' ).addClass( 'tab-active' );

		}else {
			etat = true;
			window.location.href = url;
		}

	}else if ( etat ) {
		window.location.href = url;

	}
};

/**
 * Gestion de la pagination des utilisateurs.
 *
 * @since 0.2.0
 * @version 0.2.0
 *
 * @param  {ClickEvent} event [description]
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.pagination = function( event ) {
	var href = jQuery( this ).attr( 'href' ).split( '&' );
	var nextPage = href[1].replace( 'current_page=', '' );

	jQuery( '.list-users' ).addClass( 'loading' );

	var data = {
		action: 'paginate_setting_theepi_page_user',
		next_page: nextPage
	};

	event.preventDefault();

	jQuery.post( window.ajaxurl, data, function( view ) {
		jQuery( '.list-users' ).replaceWith( view );
		window.eoxiaJS.digirisk.search.renderChanged();
	} );
};

/**
 * Détecte le champ modifié.
 *
 * @since 0.6.0
 * @version 0.7.0
 *
 * @param  {ClickEvent} event L'état du clavier.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.editField = function( event ){
	jQuery( this ).closest( '.setting-epi' ).find( '.wpeo-button' ).removeClass( 'button-disable' );
	jQuery( this ).closest( '.setting-epi' ).find( '.wpeo-button' ).addClass( 'button-valid' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_capacity".
 * Affiches le message de "success".
 *
 * @since 0.2.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.savedCapability = function( triggeredElement, response ) {
	triggeredElement.addClass( 'button-success' );
	setTimeout( function() {
		triggeredElement.removeClass( 'button-success' );
	}, 1000 );
	triggeredElement.addClass( 'button-disable' );
	triggeredElement.removeClass( 'button-valid' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_default_data".
 * Affiches le message de "success".
 *
 * @since 0.3.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.savedDefaultData = function( triggeredElement, response ) {
	triggeredElement.addClass( 'button-success' );
	setTimeout( function() {
		triggeredElement.removeClass( 'button-success' );
	}, 1000 );
	triggeredElement.addClass( 'button-disable' );
	triggeredElement.removeClass( 'button-valid' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_date_management".
 * Affiches le message de "success".
 *
 * @since 0.6.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.savedDateManagement = function( triggeredElement, response ) {
	triggeredElement.addClass( 'button-success' );
	setTimeout( function() {
		triggeredElement.removeClass( 'button-success' );
	}, 1000 );
	triggeredElement.addClass( 'button-disable' );
	triggeredElement.removeClass( 'button-valid' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_acronym".
 * Affiches le message de "success".
 *
 * @since 0.7.0
 * @version 0.7.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.theEPI.setting.savedAcronym = function( triggeredElement, response ) {
	triggeredElement.addClass( 'button-success' );
	setTimeout( function() {
		triggeredElement.removeClass( 'button-success' );
	}, 1000 );
	triggeredElement.addClass( 'button-disable' );
	triggeredElement.removeClass( 'button-valid' );
};
